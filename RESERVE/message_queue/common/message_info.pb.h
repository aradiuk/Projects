// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_info.proto

#ifndef PROTOBUF_message_5finfo_2eproto__INCLUDED
#define PROTOBUF_message_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace msg_info {
class msg;
class msgDefaultTypeInternal;
extern msgDefaultTypeInternal _msg_default_instance_;
}  // namespace msg_info

namespace msg_info {

namespace protobuf_message_5finfo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_message_5finfo_2eproto

enum msg__TYPE {
  msg__TYPE_DEBUG = 1,
  msg__TYPE_INFO = 2,
  msg__TYPE_WARN = 3,
  msg__TYPE_ERROR = 4
};
bool msg__TYPE_IsValid(int value);
const msg__TYPE msg__TYPE__TYPE_MIN = msg__TYPE_DEBUG;
const msg__TYPE msg__TYPE__TYPE_MAX = msg__TYPE_ERROR;
const int msg__TYPE__TYPE_ARRAYSIZE = msg__TYPE__TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* msg__TYPE_descriptor();
inline const ::std::string& msg__TYPE_Name(msg__TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    msg__TYPE_descriptor(), value);
}
inline bool msg__TYPE_Parse(
    const ::std::string& name, msg__TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<msg__TYPE>(
    msg__TYPE_descriptor(), name, value);
}
// ===================================================================

class msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:msg_info.msg) */ {
 public:
  msg();
  virtual ~msg();

  msg(const msg& from);

  inline msg& operator=(const msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  msg(msg&& from) noexcept
    : msg() {
    *this = ::std::move(from);
  }

  inline msg& operator=(msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const msg& default_instance();

  static inline const msg* internal_default_instance() {
    return reinterpret_cast<const msg*>(
               &_msg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(msg* other);
  friend void swap(msg& a, msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline msg* New() const PROTOBUF_FINAL { return New(NULL); }

  msg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const msg& from);
  void MergeFrom(const msg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef msg__TYPE _TYPE;
  static const _TYPE DEBUG =
    msg__TYPE_DEBUG;
  static const _TYPE INFO =
    msg__TYPE_INFO;
  static const _TYPE WARN =
    msg__TYPE_WARN;
  static const _TYPE ERROR =
    msg__TYPE_ERROR;
  static inline bool _TYPE_IsValid(int value) {
    return msg__TYPE_IsValid(value);
  }
  static const _TYPE _TYPE_MIN =
    msg__TYPE__TYPE_MIN;
  static const _TYPE _TYPE_MAX =
    msg__TYPE__TYPE_MAX;
  static const int _TYPE_ARRAYSIZE =
    msg__TYPE__TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  _TYPE_descriptor() {
    return msg__TYPE_descriptor();
  }
  static inline const ::std::string& _TYPE_Name(_TYPE value) {
    return msg__TYPE_Name(value);
  }
  static inline bool _TYPE_Parse(const ::std::string& name,
      _TYPE* value) {
    return msg__TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string from_id = 1;
  bool has_from_id() const;
  void clear_from_id();
  static const int kFromIdFieldNumber = 1;
  const ::std::string& from_id() const;
  void set_from_id(const ::std::string& value);
  #if LANG_CXX11
  void set_from_id(::std::string&& value);
  #endif
  void set_from_id(const char* value);
  void set_from_id(const char* value, size_t size);
  ::std::string* mutable_from_id();
  ::std::string* release_from_id();
  void set_allocated_from_id(::std::string* from_id);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .msg_info.msg._TYPE type = 3 [default = INFO];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::msg_info::msg__TYPE type() const;
  void set_type(::msg_info::msg__TYPE value);

  // @@protoc_insertion_point(class_scope:msg_info.msg)
 private:
  void set_has_from_id();
  void clear_has_from_id();
  void set_has_name();
  void clear_has_name();
  void set_has_type();
  void clear_has_type();
  void set_has_data();
  void clear_has_data();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr from_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  int type_;
  friend struct protobuf_message_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// msg

// required string from_id = 1;
inline bool msg::has_from_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void msg::set_has_from_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void msg::clear_has_from_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void msg::clear_from_id() {
  from_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from_id();
}
inline const ::std::string& msg::from_id() const {
  // @@protoc_insertion_point(field_get:msg_info.msg.from_id)
  return from_id_.GetNoArena();
}
inline void msg::set_from_id(const ::std::string& value) {
  set_has_from_id();
  from_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_info.msg.from_id)
}
#if LANG_CXX11
inline void msg::set_from_id(::std::string&& value) {
  set_has_from_id();
  from_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg_info.msg.from_id)
}
#endif
inline void msg::set_from_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_from_id();
  from_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_info.msg.from_id)
}
inline void msg::set_from_id(const char* value, size_t size) {
  set_has_from_id();
  from_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_info.msg.from_id)
}
inline ::std::string* msg::mutable_from_id() {
  set_has_from_id();
  // @@protoc_insertion_point(field_mutable:msg_info.msg.from_id)
  return from_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* msg::release_from_id() {
  // @@protoc_insertion_point(field_release:msg_info.msg.from_id)
  clear_has_from_id();
  return from_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void msg::set_allocated_from_id(::std::string* from_id) {
  if (from_id != NULL) {
    set_has_from_id();
  } else {
    clear_has_from_id();
  }
  from_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from_id);
  // @@protoc_insertion_point(field_set_allocated:msg_info.msg.from_id)
}

// required string name = 2;
inline bool msg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void msg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void msg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void msg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& msg::name() const {
  // @@protoc_insertion_point(field_get:msg_info.msg.name)
  return name_.GetNoArena();
}
inline void msg::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_info.msg.name)
}
#if LANG_CXX11
inline void msg::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg_info.msg.name)
}
#endif
inline void msg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_info.msg.name)
}
inline void msg::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_info.msg.name)
}
inline ::std::string* msg::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:msg_info.msg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* msg::release_name() {
  // @@protoc_insertion_point(field_release:msg_info.msg.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void msg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:msg_info.msg.name)
}

// optional .msg_info.msg._TYPE type = 3 [default = INFO];
inline bool msg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void msg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void msg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void msg::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::msg_info::msg__TYPE msg::type() const {
  // @@protoc_insertion_point(field_get:msg_info.msg.type)
  return static_cast< ::msg_info::msg__TYPE >(type_);
}
inline void msg::set_type(::msg_info::msg__TYPE value) {
  assert(::msg_info::msg__TYPE_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:msg_info.msg.type)
}

// optional string data = 4;
inline bool msg::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void msg::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void msg::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void msg::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& msg::data() const {
  // @@protoc_insertion_point(field_get:msg_info.msg.data)
  return data_.GetNoArena();
}
inline void msg::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:msg_info.msg.data)
}
#if LANG_CXX11
inline void msg::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:msg_info.msg.data)
}
#endif
inline void msg::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:msg_info.msg.data)
}
inline void msg::set_data(const char* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:msg_info.msg.data)
}
inline ::std::string* msg::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:msg_info.msg.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* msg::release_data() {
  // @@protoc_insertion_point(field_release:msg_info.msg.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void msg::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:msg_info.msg.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace msg_info

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::msg_info::msg__TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::msg_info::msg__TYPE>() {
  return ::msg_info::msg__TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_5finfo_2eproto__INCLUDED
